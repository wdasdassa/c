#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
//void  swap(int* x, int* y,int n,int m)
//{
//	*x = m;
//	*y = n;
//}//指针交换，不借助中间变量。
//void swap(int* x, int* y)
//{
//	int tmp = *x;
//	*x = *y;
//	*y = tmp;
//}

//int main()
//{
//	int a = 3;
//	int b = 5;
//	printf("a=%d,b=%d\n", a, b);
//	/*swap(&a,&b);*/
//	//a = a + b;//即a=8；
//	//b = a - b;//b=a+b-b=a=3；
//	//a = a - b;//a=a+b-a=b=5；不借助中间变量。但会出现溢出的情况。即a+b的值大于整形类型的最大值。
//	a = a ^ b;//^是按位（二进制位）异或；相同为0；相异为1；
//	b = a ^ b;
//	a = a ^ b;
//	//a=011;b=101;
//	//a^b=110;假设c=a^b;
//	//则a^c=b,b^c=a;
//	printf("a=%d,b=%d\n", a, b);
//
//
//	return 0;
//}
//
//
//0^3=3;//000^011=011,0^a=a;
// 3^3=0;//011^011=000;a^a=0;
//3^5^3=5;//3^3^5=5;符合交换律。
//求数组中只出现一次的元素，其余的均出现两次。
int main() 
{
	int arr[] = {1,2,3,45,2,3,1,45,9};
	int j = 0;
	int m = 0;
	int count = 0;
	int sz = sizeof(arr) / sizeof(arr[0]);
	/*for (j = 0; j < sz; j++)
	{
		count = 0;
		for (m = 0; m < sz; m++)
		{
			if (arr[j] == arr[m])
				count++;
		}
		if (count == 1)
			printf("%d", arr[j]);
	}*/
	//因为数组中只有一个出现一次，其余的都出现两次，如果把数组的每个数一起异或得到的结果就是只出现一次的那个数。
	for (j = 0; j < sz; j++)
	{
		m = m ^ arr[j];

	}
	printf("%d", m);


	return 0;
}