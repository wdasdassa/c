#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
// 对于/操作符如果两个操作数为整数，执行整数除法，而只要有浮点数执行的就是浮点数除法。
// 对于%操作符，两个操作数必须为整数，返回的是整除的余数。
//int main()
//{
//	int a = 4;
//	int b = a >> 1;//>>为右移操作符，右移一位相当于除2，1例外
//	               //1.算术右移，右边丢弃，左边补符号位。
//	               //2，逻辑右移，右边丢弃，左边补0。
//	b = a << 1;//<<为左移操作符，左边丢弃，右边补0；左移一位相当于乘二，-1例外
//	           //操作对象为整数。
//
//}
//int main()
//{
//	//&,按（二进制）位与，有0则为0，全是1才是1.
//	int a = 3;//011
//	int b = 5;//101
//	int c = a & b;//c=1
//	printf("%d\n", c);
//	c = a | b;//|按（二进制）位或，有1则1，全0为0；c=7，
//	printf("%d\n", c);
//	c = a ^ b;//^按（二进制）位异或，相同为0，不同为1，c=6.
//	printf("%d\n", c);
//	return 0;
//}
//int main()
//{
//	int a = 0;
//	a = a + 2;
//	a += 2;
//	a >>= 2;
//	a = a >> 2;
//	a &= 2;
//	a = a & 2;//复合操作符，
//
//
//}
//单目操作符，只有一个操作数；双目操作符有两个操作数。
//！逻辑反操作，变假为真，变真为假。c语言中！表示逻辑运算中的非运算
// int a=0;
//  !a=1;
//   a=5
//   !a=0;
//~对一个数的二进制为按位取反。
//&取地址操作符
//*解引用操作符。
//sizeof计算变量所占内存空间的大小，单位是字节。
//int main()
//{
//	char c = 'v';
//	char* p = &c;
//	int arr[10] = { 0 };
//	printf("%d\n", sizeof(c));//1
//	printf("%d\n", sizeof(p));//8(4)
//	printf("%d\n", sizeof(arr));//40
//	printf("%d\n", sizeof(int[2]));//8,4*2
//}
//int main()
//{
//	short a = 0;
//	int b = 8l;
//	printf("%d\n", sizeof(a = b + 2));//2,a的类型是short，占用2个字节
//	printf("%d\n", a);//0，sizeof中的表达式不会计算，不直接运算的。
//
//
//
//
//}
//前置++，先加后用，后置++，先用后加。
//int  main()
//{
//	int a = (int)3.14;//(类型)是强制类型转换。把double类型强制转换为int类型。
//
//
//	return 0;
//}
//区分按位与，按位或和逻辑与，逻辑或
//&按位与，有0则0，全是1才是1；关注的是二进制位。
//|按位或，有1则1，全是0才是0；关注的是二进制位。
//^按位异或，相同为0，不同为1；关注的是二进制位。
// &&逻辑与，有假则假，全是真才是真，关注的是本质，真假。
// ||逻辑或，有真则真，全是假才是假，关注的是本质，真假。
//int main()
//{
//	int c = 0;
//	int a = 1;//001
//	int b = 3;//011
//	printf("%d\n", a & b);//1
//	printf("%d\n", a | b);//3
//	printf("%d\n", a && b);//1,a,b都为真
//	printf("%d\n", a || b);//1
//	printf("%d\n", a && c);//0,a为真，c为假。
//	printf("%d\n", a || c);//1
//}
//int main()
//{
//	int a = 0, b = 2, c = 3, d = 4;
//	int i = 0;
//	i = a++ && ++b && d++;//;当逻辑与的左边为0是右边便不再计算，已确定结果为0。a++,先用a=0,再a=a+1，逻辑与左边为0，右边不再计算，
//	printf("a=%d,b=%d,c=%d,d=%d", a, b, c, d);//a=1,b=2,c=3,d=4.
//	
//}
//int main()
//{
//	int a = 0, b = 2, c = 3, d = 4;
//	int i = 0;
//	i = a++ || ++b || d++;//按照顺序先计算a++||++b，计算的结果||d++
//	//a++||++b也即是0||3，左边无法判断结果，所以两边都要计算，0||3==1；1||d++，左边即可得出结果所以右边不再计算。
//	printf("a=%d,b=%d,c=%d,d=%d", a, b, c, d);//1，3 ，3 ，4
//
//
//	return 0;
//}
//条件操作符，三目操作符
//exp1？exp2:exp3;//exp1为真，执行exp2；exp1为假，执行exp3；
//int main()
//{
//	int a = 29;
//	int b = 18;
//	int max = a > b ? a : b;
//	printf("%d", max);
//	/*if (a > b)
//		max = a;
//	else
//		max = b;*/
//
//}
//逗号表达式，就是用逗号隔开的多个表达式。逗号表达式，从左到右依次执行，整个表达式的结果是最后一个表达式的结果。
//exp1,exp2,exp3...expn
//int main()
//{
//	int a = 2;
//	int b = 10;
//	int c = (a > b, b = a + 2, a, b = a + 10);//最后一个表达式的结果是b=12
//	printf("%d", c);//c==12
//
//
//	return 0;
//}
//[]下标引用操作符，
//int main()
//{
//	int arr[10] = { 0 };
//	arr[4] = 5;//[]操作符的操作数是4和arr。即数组名和索引值。
//
//
//
//	return 0;
//}
//()函数调用操作符
//int get_max(int x, int y)
//{
//
//	return x > y? x : y;
//}
//int main()
//{
//	int a = 19;
//	int b = 29;
//	int max=get_max(a, b);//()它的操作数是函数名，和函数的参数。
//
//
//	return 0;
//}
//创建一个结构体类型-struct stu
//struct stu
//{   //成员变量
//	char name[20];
//	int age;
//	char id[20];
//};
//int main()
//{   //使用struct stu这个类型创建一个s1变量，并初始化
//	struct stu s1 = { "张三",20,"2022111" };
//	struct stu* ps = &s1;
//	printf("%s\n", s1.name);
//	printf("%d\n", s1.age);
//	printf("%s\n", s1.id);//结构体变量.成员名。
//	printf("%s\n", ps->name);
//	printf("%d\n", ps->age);
//	printf("%d\n", ps->id);//结构体指针->成员名。访问结构体的成员
//	printf("%s\n", (*ps).name);
//	printf("%d\n", (*ps).age);
//	printf("%s\n", (*ps).id);
//	return 0;
//}
//隐式类型转换
//c的整型算术运算总是至少以缺省整型类型的精度来进行的。
// 为了获得这个精度，表达式中的字符和短整型操作数在使用之前被转换为普通整型，这种转换叫整型提升
//
//int main()
//{
//	char a = 3;
//	//3是整数，占四个字节，  00000000000000000000000000000011；
//	// a 是char类型占一个字节
//	//所以a中存储的是00000011；
//	char b = 127;
//	//123是整数，占四个字节，00000000000000000000000001111111；
//	// b 是char类型占一个字节
//	//所以a中存储的是01111111；
//	char c = a + b;
//	//当执行a+b是会发生隐式类型转换，即把a，b字符操作数转换为普通整型。
//	// 转换规则如果是有符号位的话；是按照变量的数据类型的符号位补充，即高位补充符号位的数字。
//	// 如果没有符号位，是无符号数就直接高位补0.
//	//即a=00000000000000000000000000000011
//	//  b=00000000000000000000000001111111
//	//再把a，b相加。
//	//a+b=00000000000000000000000010000010；
//	// 运算结束后被截断，存储到c中
//	// c是char类型，占一个字节所以c中存储的是10000010；
//	printf("%d", c);
//	//打印时，因为打印的是整型，c是字符类型的，又会发生隐式类型转换。
//	//c：10000010，c是负数
//	//转换为：11111111111111111111111110000010；为补码；
//	//        11111111111111111111111110000001；反码；
//	//        10000000000000000000000001111110；原码
//	//打印结果即可
//	return 0;
//}
//int main()
//{
//	char a = 0xb6;//0xb6,是16进制转换为二进制是10110110；
//	short b = 0xb600;//0xb600,是16进制转换为二进制是1011011000000000；
//	int x = 0xb6000000;
//	if (a == 0xb6)//==也是运算符会发生隐式类型转换。a=11111111111111111111111110110110
//		printf("a");
//	if (b == 0xb600)//也发生隐式类型转换，          b=11111111111111111011011000000000
//		printf("b");
//	if (x == 0xb6000000)//不会发生隐式类型转换
//		printf("c");
//
//
//
//
//
//	return 0;
//}
//int main()
//{ 
//	char  a = 1;//%u打印无符号10进制整数
//	printf("%u\n", sizeof(a));//1
//	printf("%u\n", sizeof(+a));//4
//	printf("%u\n", sizeof(-a));//4
//	printf("%u\n", sizeof(!a));//1
//	printf("%u\n", sizeof(a = -a));//1,发生了隐式类型转换
//
//	//a在sizeof（）中发生算术运算中进行了整型提升，变成了int类型。
//	//！a为逻辑运算不发生整型提升。
//
//	return 0;
//}
//算术转换
//如果某个操作符的各个操作数属于不同的类型，那么除非其中一个操作数转换为另一个操作数的类型，否则无法进行操作。
//寻常算术转换层次体系
//
//long double
//double
//float
//unsigned long int 
// long int
// unsigned int 
// int
//如果某个操作数的类型在上面这个列表中的排名比较低，那么首先要转换为另外一个操作数的类型再执行运算。算术转换要合理。