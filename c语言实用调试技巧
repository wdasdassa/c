#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
#include<assert.h>
//debug版本通常称为调试版本，并且不做各种优化，便于程序员调试程序
//release称为发布版本，无调试信息，它往往是进行了各种优化，使得程序在代码大小，运行速度上都是最优的，以便用户更好使用
//F5，启动调试，经常用来跳到下一个短点；与F9配合使用
//F9，创建断点，取消断点，可以在程序的任意位置设置断点，这样可以让程序在想要的位置停止执行。
//断点不是物理上的断点，而是程序执行逻辑上的断点。
//F10，逐过程，通常用来处理一个过程，一个过程可以是一次函数调用，或者是一条语句。
//F11，逐语句，就是每次都执行一条语句，也可以使我们的执行逻辑进入函数内部。
//ctrl+F5，开始执行不调试，直接运行。
//int main()
//{
//	int i = 0;
//	for (i = 0; i <= 100;i++)
//		printf("%d", 100 - i);
//	for (i = 0; i <= 100; i++)
//		printf("%d", i);//在第十七行设置一个断点，按下F5，程序直接跳到断点（断点前面的程序全部执行），此时i=0；
//	                    //再按F5，程序跳到，断点，此时i=1；以此往后，直至程序完全结束。所以说断点不是物理上的断点
//	                    //而是程序执行逻辑上的断点。看似只有一个断点，其实暗含很多断点。
//	return 0;           //右击断点可以设置条件
//}
//int main()
//{
//	int i = 0;
//	int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };
//	for (i = 0; i <= 12; i++)
//	{
//		printf("hhh\n");
//		arr[i] = 0;
//	}
//	return 0;
//}
//此程序可能导致死循环。如果导致死循环的话，即for循环中，越界访问的arr[i]和i的地址相同，当修改arr[i]=0，是把i也修改为0；
//循环再次进行，当再次越界访问到arr[i]时又把i修改为0；一直循环下去，导致死循环。
//死循环原因是：
//局部变量的创建是在栈区上创建的，栈区的默认使用是，先用高地址处的空间，再用低地址处的空间。
// 栈区空间的地址是由下到上，地址升高。
// i的创建早于arr的创建，所以i的地址高于arr的地址，即i的地址高于arr[9]的地址。
// 由于数组的创建是连续的，且数组元素的地址随下标的增大而增大。
// 当在越界访问数组时 即访问的数组元素下标大于9时，随着下标的增大，元素的地址在升高，所以在越界访问时，访问元素的地址可能会和i的地址相同。
// 当二者相同时，就会把i的值修改，造成死循环。
//可以把i的创建晚于arr的创建。就不会导致死循环。
//release 版本会将代码优化，让arr的地址高于i的地址，从而避免错误。
////
//自定义库函数strcpy
//void my_strcpy1(char arr1[], char arr2[])
//{
//	while (*arr2 != '\0')
//	{
//		*arr1 = *arr2;
//		arr1++;
//		arr2++;
//	}
//	*arr1 = *arr2;
//}//第一版本。
//void my_strcpy2(char arr1[], char arr2[])
//{
//	while (*arr1++ = *arr2++)//后置++，先用后加，先解引用再赋值，arr1，arr2再加1。
//		                     //当*arr2=='\0',将其赋给*arr1时，表达式的结果是'\0','\0'的ASCII值是0，为假，循环结束。
//	{
//		;
//	}
//}//第二版本
//void my_strcpy3(char arr1[], char arr2[])
//{
//	assert(arr1!=NULL);//当表达式为真时，什么都不发生，为假时会报错，提示错误
//	assert(arr2!=NULL);
//	while (*arr1++ = *arr2++)
//	{
//		;
//	}
//}//第三版本
//void my_strcpy4(char* arr1, const char* arr2)
//{  //将char* arr2用const修饰，就无法直接修改*arr2的值，即无法修改要拷贝的内容，当拷贝的字符串和目的字符串写反时会报错。
//	assert(arr1 != NULL);//当表达式为真时，什么都不发生，为假时会报错，提示错误
//	assert(arr2 != NULL);
//	while (*arr1++ = *arr2++)
//	{
//		;
//	}
//}//第四版本。
//char* my_strcpy5(char* arr1, const char* arr2)
//{
//	char* ret = arr1;
//	assert(arr1 != NULL);
//	assert(arr2 != NULL);
//	while (*arr1++ = *arr2++)
//	{
//		;
//	}
//	return ret ;//将函数返回为目的字符串的首元素地址。可以直接作为另一个函数的参数。
//}
//
//int main()
//{
//	char arr1[] = "##########################";
//	char arr2[] = "hello world";
//	//my_strcpy1(arr1, arr2);
//	//my_strcpy2(arr1, arr2);
//    //my_strcpy3(arr1, arr2);
//    //my_strcpy4(arr1, arr2);
//	//my_strcpy5(arr1, arr2);
//	printf("%s", my_strcpy5(arr1, arr2));
//	return 0;
//}
//int main()
//{
//	     int b = 9;
//	 const int num = 9;
//	//num = 10;//const修饰num，num无法直接被改变；
//	// int* p = (int *) & num;
//	//   *p = 10;//但可以通过*p去修改num；
//	const int* p = &num; //const修饰的是*p，无法通过*p修改num的值。
//	int* const pc = &b;//const修饰的是pc，pc的值无法改变；
//	//pc = &num;
//	printf("%d", num);
//
//}
//int main()
//{
//	int num = 8;
//	const int* p = &num;
//	//*p = 13;无法通过*p修改num；但是可以直接修改num；
//	num = 9;
//	const int* const p = &num;//既不能修改*p，也不能修改 p。
//	printf("%d", num);
//}//const修饰谁，就不能直接修改其值，但可能可以通过其他的方式修改。