#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
//指针是：在计算机科学中，指针（Polnter）是编程语言中的一个对象，利用地址，它的值直援指向
//{points to）存在电脑存储器中另—个地方的值。由于通过地址能找到所需的变量单元，可以
//说，地址指向该变量单元。因此．将地址形象化的称为指针，意思是通过它能找到以它为地址
//的内存单元
//指针类型决定了指针进行解引用操作的时候，能访问空间的大小
//int main()
//{
//	int a = 0x11223344;
//	int* p = &a;
//	*p = 0;//p在解引用是能访问4个字节的大小
//	char b = '1';
//	char* pc = &b;
//	*pc = '4';//pc在解引用时能访问1个字节的大小
//	          //char* 访问一个字节
//	          //int* 访问四个字节
//	          //double* 访问八个字节
//	return 0;
//} 
//int main()
//{
//	int a = 0x11223344;
//	int* pc = &a;
//	char* pd = (char*)&a;
//	printf("%p\n", pc);//  000000F29A2FF6E4
//	printf("%p\n", pc+1);//000000F29A2FF6E8//走了4个字节；
//	printf("%p\n", pd);//  000000F29A2FF6E4
//	printf("%p\n", pd+1);//000000F29A2FF6E5//走了1个字节；
//	//指针类型决定了：指针走一步走多远（指针的步长）；
//	return 0;
//}
//int main()
//{
//	int arr[10] = { 0 };
//	int* p = arr;//数组名-首元素地址。
//	int i = 0;
//	for (i = 0; i < 10; i++)
//	{
//		*(p + i) = 1;
//	}
//
//	return 0;
//}
//野指针：指针所指向的位置是不可知的（随机的，不正确的，没有明确限制的）
// 1，没有初始化的指针
//2,指针越界
//3，指针所指向的空间释放
//
//int main()
//{
//	int* p;//局部变量未初始化，默认值为随机值。
//	*p = 20;//未初始化，野指针
//	return 0;
//}
//int main()
//{
//	int arr[10] = { 0 };
//	int* p = arr;
//	int i = 0;
//	for (i = 0; i < 12; i++)
//		*(p + i) = 10;//野指针，指针越界访问；
//
//	return 0;
//}
//int* test()
//{
//	int a = 0;
//	return &a;
//}
//int main()
//{  
//	int* p = test();
//	*p = 20;
//	return 0;
//}//野指针，指针所指向的内存已释放。局部变量a的生命周期已经结束。
//int main()
//{
//	int* p = NULL;//NULL用来初始化指针，或给指针赋值，当你不知道给指针赋什么值时。
//	int a = 20;
//	int* pc = &a;
//	*pc = 90;
//	pc = NULL;//当不再使用pc指针时将其置为NULL即空指针。
//	return 0;
//}
//int main()
//{
//	int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };
//	int* p = arr;
//	for (; p < &arr[10];)//地址也可以比较大小
//	{
//
//		*p++ = 10;//后置++，先用后加，先*p=10，再p=p+1；
//	}
//
//
//	return 0;
//}
//int main()
//{
//	char ch[5] = { 0 };
//	int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };
//	printf("%d", &arr[9] - &arr[0]);//9,得到的是两个地址直接的元素个数，也是索引值相减9-0=9。
//	printf("%d", &arr[0] - &ch[0]);//err错误
//
//
//	return 0;
//}地址相减必须是同一块内存空间。
//int my_strlen(char arr[])
//{
//	int count = 0;
//     if (*arr == '\0')
//		return 0;
//	do
//	{
//		count++;
//		arr++;
//	
//	} while (*arr != '\0');
//
//
//	return count;
//}
//int my_strlen(char arr[])
//{
//	if (*arr != '\0')
//		return 1 + my_strlen(arr + 1);
//	else
//	{
//		return 0;
//	}
//}
//int my_strlen(char arr[])
//{
//	int count = 0;
//	char* start = arr;//start为首元素的地址
//	while (*(arr + count)!= '\0')
//		count++;
//	char* end = arr + count;//求出'\0'的地址
//	return end - start;//用'\0'的地址减去首元素的地址，就是字符串的长度。
//}
//int main()
//{
//	char arr[] = "bitck kkk";
//	int len = my_strlen(arr);
//	printf("%d", len);
//
//	return 0;
//}
//c语言标准规定
//允许指向数组元素的指针与指向数组最后一个元素后面的那个内存位置的指针比较。
// 但是不允许与指向第一个元素之前的那个内存位置的指针进行比较。
//最好选用第一种写法。
//int main()//第一种写法
//{
//	int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };
//	int* p = arr;
//	for (; p < &arr[10];)//越界
//	{
//		*p++ = 10;
//	}
//	return 0;
//}
// 第二种写法，相较于第一种不好。不满足c语言语法。
//int main()
//{
//	int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };
//	int* p = &arr[9];
//	for (; p>&arr[-1];)//越界，
//	{
//		*p-- = 10;
//	}
//	return 0;
//}
//int main()
//{
//	int a = 9;
//	int* p = &a;//一级指针，存放a的地址，int告诉你所指的对象的类型，*告诉你是指针。
//	int** ppa = &p;//二级指针，存放p的地址，int*告诉你所指向对象的类型，*告诉你是指针。
//	printf("%d", **ppa);//*ppa=p,**ppa=*p=a
//	return 0;
//}
//指针数组-本质是数组，存放指针的数组
//数组指针-本质是指针。
//int main()
//{
//	int a = 10;
//	int b = 20;
//	int c = 102;
//	int* pa = &a;
//	int* pb = &b;
//	int* pc = &c;
//	int* arr[3] = { &a,&b,&c };
//	int i = 0;
//	for (i = 0; i < 3; i++)
//		printf("%d ", *(arr[i]));
//
//	return 0;
//}
