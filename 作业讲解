#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
//调用函数esx((v1,v2),(v3,v4),v5,v6);
//esx中实参的个数是4个;(v1,v2)和(v3,v4)都是逗号表达式，结果是最后一个表达式的结果。
//一个函数内定义的变量只在本函数范围内有效
//int main()//一个函数内复合语句中定义的变量在函数中可能无效，无法使用。
//{         //复合语句是指函数中成对括号构成的代码
//
//
//	{
//		int a = 0;
//	}
//	printf("%d", a);//此处的a无法打印，
//}
//int main()
//{
//	int arr[] = { 1,2,(3,4),5 };
//	printf("%d", sizeof(arr));//16,逗号表达式
//
//
//	return 0;
//}冒泡排序
//int main()
//{
//	int j = 0;
//	int tmp = 0;
//	int i = 0;
//	int arr[] = { 12,146,646,1651,31,132,1,31,123,1323,132,1346,11,54,165,464};
//	int sz = sizeof(arr) / sizeof(arr[0]);
//	for(i = 0; i < sz; i++)
//		printf("%d ", arr[i]);
//	printf("\n");
//	for (j = 0; j < sz - 1; j++)
//	{   
//		for (i=0; i < sz - 1-j; i++)
//		{
//			if (arr[i] < arr[i + 1])
//			{
//				tmp = arr[i];
//				arr[i] = arr[i + 1];
//				arr[i + 1] = tmp;
//			}
//		}
//	}
//	for (i = 0; i < sz; i++)
//		printf("%d ", arr[i]);
//	return 0;
//}
//#define sz 9
//void init(int arr[],int size)
//{
//	int i = 0;
//	for (i = 0; i < size; i++)
//		arr[i] = 0;
//
//}
//void print(int arr[], int size)
//{
//	int i = 0;
//	for (i = 0; i < size; i++)
//		printf("%d ", arr[i]);
//
//}
//void revese(int arr[], int size)
//{
//	int i = 0;
//	int tmp = 0;
//	for (i = 0; i < sz ; i++)
//	{
//		if (i >= sz -1-i)
//			break;
//		tmp = arr[i];
//		arr[i] = arr[sz - 1-i];
//		arr[sz -1- i] = tmp;
//	}
//}
//int main()
//{
//	int arr[sz] = { 1 ,215,154,46,6461,46,4565,465,4 };
//	//init(arr,sz);
//	print(arr,sz);
//	printf("\n");
//	revese(arr,sz);
//	print(arr, sz);
//	return 0;
//}
//int main()
//{
//	int tmp = 0;
//	int i = 0;
//	int a[10] = { 1,2,3,4,5,6,7,8,9,10 };
//	int b[10] = { 10,9,8,7,6,5,4,3,2,1 };
//	for (i = 0; i < 10; i++)
//	{
//		tmp = a[i];
//		a[i] = b[i];
//		b[i] = tmp;
//	}
//	for (i = 0; i < 10; i++)
//		printf("a[%d]==%d b[%d]==%d\n", i, a[i], i, b[i]);
//	return 0;
//
//
//}
//小端存储：数据高字节保存在内存的高地址中，数据的低字节保存在低地址中。

//大端存储：数据高字节保存在内存的低地址中，数据的低字节保存在高地址中。
//从左到右地址升高
//

//int main()
//{
//	int a = 0x11223344;//内存中的排列是44 33 22 11.小端存储
//	char* p = (char*)&a;
//	*p = 0;
//	printf("%x", a);//11223300   %x无符号十六进制整数
//
//
//	return 0;
//}
//int main()
//{
//	int a = 0x98765432;//字节从左到右升高
//	char* p = (char*)&a;
//	*p = 0;
//	printf("%x", a);//98765400
//
//
//	return 0;
//}
//int i;//全局变量不初始化默认为0.
//      //局部变量不初始化默认为随机值
//int main()
//{
//    i--;//i=-1
//    if (i > sizeof(i))//sizeof计算类型，变量的所占空间的大小，恒大于等于0，返回值为无符号数
//        printf(">");//i为int类型与无符号数比较时会发生算术转换，int的等级低于unsigned int
//    else            //先将i转换为无符号数再比较，-1的二进制为10000000000000000000000000000001，左边的1是符号位
//                    //补码为11111111111111111111111111111111
//        printf("<");//变为无符号数后，左边的1就不是符号位了，11111111111111111111111111111111代表一个二进制数大于4,且为正数三码合一
//                    //打印>
//    return 0;
//
//
//}
//int main()
//{
//	int a, b, c;
//	a = 5;
//	c = ++a;//++优先级高于=优先级，a=6，c=6
//	b = ++c, c++, ++a, a++;//=优先级高于逗号优先级低于++优先级，b=7，c=8,a=8;
//	b += a++ + c;//+=低于+低于++，b=23，a=9，c=8；
//	printf("a=%d,b=%d,c=%d", a, b, c);//9 23,8
//	return 0;
//}
//int cal(int a)
//{
//	int i = 0;
//	int count = 0;
//	for(i=0;i<32;i++)
//	{
//		if (a & 1 == 1)
//			count++;
//		a = a >>1;
//	}
//	return count;
//}
//int cal( unsigned int a)
//{
//	int count = 0;
//	while(a)
//	{
//		if (a % 2 == 1)
//			count++;
//		a = a >> 1;
//	}
//	return count;
//}
//int cal( int a)
//{
//	int count = 0;
//	while (a)
//	{
//	  a = a & (a - 1);
//			count++;
//	}
//	return count;
//}
////int main()
//{
//	int a = 0;
//	scanf("%d", &a);
//	int b=cal(a);
//	printf("%d", b);
//
//
//	return 0;
//}
//int main()
//{
//	int tmp1 = 0;
//	int tmp2 = 0;
//	int count = 0;
//	int i = 0;
//	int a = 1999;
//	int b = 2299;
//	for (i = 0; i < 32; i++)
//	{
//		tmp1 = a % 2;
//		tmp2 = b % 2;
//		if (tmp1 != tmp2)
//			count++;
//		a=a >> 1;
//		b=b >> 1;
//		if (a == 0 && b == 0)
//			break;
//	}
//	printf("%d", count);
//
//
//	return 0;
//}
//int main()
//{
//	int count = 0;
//	int i = 0;
//	int a = 1999;
//	int b = 2299;
//	for (i = 0; i < 32; i++)
//	{
//		if ((a&1) != (b&1))
//			count++;
//		a = a >> 1;
//		b = b >> 1;
//		if (a == 0 && b == 0)
//			break;
//	}
//	printf("%d", count);
//
//
//	return 0;
//}
//int main()
//{
//	int count = 0;
//	int i = 0;
//	int a = 1999;
//	int b = 2299;
//	for (i = 0; i < 32; i++)
//	{
//		if ((a%2)^ (b%2)==1)
//			count++;
//		a = a >> 1;
//		b = b >> 1;
//		if (a == 0 && b == 0)
//			break;
//	}
//	printf("%d", count);
//
//
//	return 0;
//}
//int count_diff_bit(int a, int b)
//{
//	return cal(a ^ b);//a和b异或的结果，相异为1，再计算里面1的个数，可知不同的位数。
//}
//int main()
//{
//	int a, b;
//	scanf("%d%d", &a, &b);
// int count=	count_diff_bit(a, b);
// printf("%d", count);
//
//
//	return 0;
//}
//void print(int m)
//{
//	int tmp = m;
//	int i = 0;
//	for (i=1; i <= 32; i+=2)
//	{
//		tmp=tmp >>(i-1);
//		printf("第%d位:%d\n", i, tmp&1);
//	}
//	       tmp = m;
//	for (i = 2; i <= 32; i += 2)
//	{
//		tmp = tmp >> (i - 1);
//		printf("第%d位:%d\n", i, tmp&1);
//	}
//	
//}
//void print(int m)
//{
//	int i = 0;
//	printf("打印偶数位：\n");
//	for (i = 31; i>= 0; i -= 2)
//	{
//		printf("第%d位:%d\n", i+1, (m>>i) & 1);
//	}
//	printf("\n");
//	printf("打印奇数位:\n");
//	for (i = 30; i>=0; i -= 2)
//	{
//		printf("第%d位:%d\n", i+1, (m>>i) & 1);
//	}
//
//}
//int main()
//{
//	int m = 0;
//	scanf("%d", &m);
//	print(m);
//
//
//
//
//	return 0;
//}
//int main()
//{
//	int i = 0;
//	int arr[] = { 1,2,3,4,5,6,7,8,9 };
//	int sz = sizeof(arr) / sizeof(arr[0]);
//	int* p = arr;
//	for (i = 0; i < sz; i++)
//		printf("%d ", *(p + i));
//	return 0;
//}
//int main()
//{
//	int i = 0;
//	int j = 0;
//	int f = 9;
//	scanf("%d", &f);
//	for (i = 1; i <= f; i++)
//	{
//		for (j = 1; j <= i; j++)
//			printf("%2d*%-2d==%-3d ", i, j, i * j);
//		printf("\n");
//	}
//	return 0;
//}
//void reverse_string(char a[],int sz)
//{
//	char tmp;
//	int left = 0;
//	int right = sz - 1;
//	while (right > left)
//	{
//		tmp = a[right];
//		a[right] = a[left];
// 		a[left] = tmp;
//		right--;
//		left++;
//	}
//}
#include<string.h>
//void reverse_string(char a[])
//{
//	char tmp;
//	int len=strlen(a);
//	if (len == 1)
//		return NULL;
//	tmp = a[0];
//	a[0] = a[len - 1];
//	a[len - 1] = '\0';//变为'\0'，计算剩余转换字符串长度。
//	if (len > 2)
//		reverse_string(a + 1);
//	 a[len - 1] = tmp;
//}
//int main()
//{
//
//	char a[7] = "abcdefg";
//	reverse_string(a,7);
//		printf("%s ", a);
//	return 0;
//}
//int dig(int x)
//{
//	if (x / 10 != 0)
//		return x % 10 + dig(x / 10);
//	if (x / 10 == 0)
//		return x % 10;
//}
//int main()
//{
//	int a = 1729;
//	int m=dig(a);
//	printf("%d", m);
//	return 0;
//}
//int mul(int n)
//{
//	if (n == 1)
//		return 1;
//	if (n > 1)
//		return n * mul(n - 1);
//}
//int main()
//{
//	int n = 10;
//    int m=mul(n);
//    printf("%d", m);
//	return 0;
//}
//int cal(int m)
//{
//	if (m == 1)
//		return 1;
//	if (m == 2)
//		return 1;
//	if (m > 2)
//		return cal(m - 1) + cal(m - 2);
//}
//int cal(int m)
//{  
//	int ret = 3;
//	int a=1;
//	int b = 1;
//	int c = 0;
//	if (m == 1 || m == 2)
//		return 1;
//	for (ret = 3; ret <= m; ret++)
//	{
//		c = a + b;
//		a = b;
//		b = c;
//	}
//	return c;
//}
//int main()
//{
//	int m = 6;
//	int f=cal(m);
//	printf("%d", f);
//	return 0;
//}
//double cal(int n, int k)
//{
//	if (n == 1||k==0)
//		return 1;
//	if (k == 1)
//		return n;
//	if(k>1)
//	   return n * cal(n, k - 1);
//	if (k < 0)
//		return 1.00/ cal(n, -k);
//}
//int main()
//{
//	int n = 2;
//	int k =  2;
//	double m=cal(n, k);
//	printf("%lf", m);
//	return 0;
//
//}//计算n的k次方。
//void print(int m)
//{
//	if (m %10 != 0)
//	{       
//		printf("%d", m % 10);//递归在下打印4321
//		print(m / 10);//递归在上打印1234
//	}
//}
//int main()
//{
//	int m = 1234;
//	print(m);
//
//
//	return 0;
//}打印一个整数的每一位。